// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v2.1.0-1-g1f618f69-wicked-fork
// source: query.sql

package items

import (
	"context"
	"crypto/sha256"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/rs/zerolog/log"
)

type BulkInsertParams struct {
	Name        string
	Description string
	Category    Itemcategory
	Price       pgtype.Numeric
	Thumbnail   string
	Metadata    []byte
}

const createItems = `-- name: CreateItems :one
INSERT INTO Items (
  Name, Description, Category, Price, Thumbnail, Metadata
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, description, category, price, thumbnail, qrcode, metadata, createdat, updatedat
`

type CreateItemsParams struct {
	Name        string
	Description string
	Category    Itemcategory
	Price       pgtype.Numeric
	Thumbnail   string
	Metadata    []byte
}

func (q *Queries) CreateItems(ctx context.Context, arg CreateItemsParams) (*Item, error) {
	row := q.db.WQueryRow(ctx, "items.CreateItems", createItems,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Price,
		arg.Thumbnail,
		arg.Metadata,
	)
	var i *Item = new(Item)
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Price,
		&i.Thumbnail,
		&i.Qrcode,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	if err == pgx.ErrNoRows {
		return (*Item)(nil), nil
	} else if err != nil {
		return nil, err
	}

	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM Items
WHERE id = $1
`

// -- invalidate : [GetItemByID, SearchItems, ListAllItems]
func (q *Queries) DeleteItem(ctx context.Context, id int64, getItemByID *int64, searchItems *string) error {
	_, err := q.db.WExec(ctx, "items.DeleteItem", deleteItem, id)
	if err != nil {
		return err
	}
	// invalidate
	_ = q.db.PostExec(func() error {
		var anyErr error
		if getItemByID != nil {
			key := "items:GetItemByID:" + hashIfLong(fmt.Sprintf("%+v", *getItemByID))
			err = q.cache.Invalidate(ctx, key)
			if err != nil {
				log.Error().Err(err).Msgf(
					"Failed to invalidate: %s", key)
				anyErr = err
			}
		}
		if searchItems != nil {
			key := "items:SearchItems:" + hashIfLong(fmt.Sprintf("%+v", *searchItems))
			err = q.cache.Invalidate(ctx, key)
			if err != nil {
				log.Error().Err(err).Msgf(
					"Failed to invalidate: %s", key)
				anyErr = err
			}
		}
		key := "items:ListAllItems:"
		err = q.cache.Invalidate(ctx, key)
		if err != nil {
			log.Error().Err(err).Msgf(
				"Failed to invalidate: %s", key)
			anyErr = err
		}
		return anyErr
	})
	return nil
}

const deleteTwoItem = `-- name: DeleteTwoItem :exec
DELETE FROM Items
WHERE id = $1 OR id = $2
`

type DeleteTwoItemParams struct {
	ID   int64
	ID_2 int64
}

// -- invalidate : [GetItemByID, GetItemByID]
func (q *Queries) DeleteTwoItem(ctx context.Context, arg DeleteTwoItemParams, getItemByID *int64, getItemByID1 *int64) error {
	_, err := q.db.WExec(ctx, "items.DeleteTwoItem", deleteTwoItem, arg.ID, arg.ID_2)
	if err != nil {
		return err
	}
	// invalidate
	_ = q.db.PostExec(func() error {
		var anyErr error
		if getItemByID != nil {
			key := "items:GetItemByID:" + hashIfLong(fmt.Sprintf("%+v", *getItemByID))
			err = q.cache.Invalidate(ctx, key)
			if err != nil {
				log.Error().Err(err).Msgf(
					"Failed to invalidate: %s", key)
				anyErr = err
			}
		}
		if getItemByID1 != nil {
			key := "items:GetItemByID:" + hashIfLong(fmt.Sprintf("%+v", *getItemByID1))
			err = q.cache.Invalidate(ctx, key)
			if err != nil {
				log.Error().Err(err).Msgf(
					"Failed to invalidate: %s", key)
				anyErr = err
			}
		}
		return anyErr
	})
	return nil
}

const getItemByID = `-- name: GetItemByID :one
SELECT id, name, description, category, price, thumbnail, qrcode, metadata, createdat, updatedat FROM Items
WHERE id = $1 LIMIT 1
`

// -- cache : 5m
func (q *Queries) GetItemByID(ctx context.Context, id int64) (*Item, error) {
	dbRead := func() (any, time.Duration, error) {
		cacheDuration := time.Duration(time.Millisecond * 300000)
		row := q.db.WQueryRow(ctx, "items.GetItemByID", getItemByID, id)
		var i *Item = new(Item)
		err := row.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Price,
			&i.Thumbnail,
			&i.Qrcode,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		)
		if err == pgx.ErrNoRows {
			return (*Item)(nil), cacheDuration, nil
		}
		return i, cacheDuration, err
	}
	if q.cache == nil {
		i, _, err := dbRead()
		return i.(*Item), err
	}

	var i *Item
	err := q.cache.GetWithTtl(ctx, "items:GetItemByID:"+hashIfLong(fmt.Sprintf("%+v", id)), &i, dbRead, false, false)
	if err != nil {
		return nil, err
	}

	return i, err
}

const listAllItems = `-- name: ListAllItems :many
SELECT id, name, description, category, price, thumbnail, qrcode, metadata, createdat, updatedat FROM Items
`

// -- cache : 30m
func (q *Queries) ListAllItems(ctx context.Context) ([]Item, error) {
	dbRead := func() (any, time.Duration, error) {
		cacheDuration := time.Duration(time.Millisecond * 1800000)
		rows, err := q.db.WQuery(ctx, "items.ListAllItems", listAllItems)
		if err != nil {
			return nil, 0, err
		}
		defer rows.Close()
		var items []Item
		for rows.Next() {
			var i *Item = new(Item)
			if err := rows.Scan(
				&i.ID,
				&i.Name,
				&i.Description,
				&i.Category,
				&i.Price,
				&i.Thumbnail,
				&i.Qrcode,
				&i.Metadata,
				&i.CreatedAt,
				&i.UpdatedAt,
			); err != nil {
				return nil, 0, err
			}
			items = append(items, *i)
		}
		if err := rows.Err(); err != nil {
			return nil, 0, err
		}
		return items, cacheDuration, nil
	}
	if q.cache == nil {
		items, _, err := dbRead()
		return items.([]Item), err
	}
	var items []Item
	err := q.cache.GetWithTtl(ctx, "items:ListAllItems:", &items, dbRead, false, false)
	if err != nil {
		return nil, err
	}

	return items, err
}

const listItems = `-- name: ListItems :many
SELECT id, name, description, category, price, thumbnail, qrcode, metadata, createdat, updatedat FROM Items
WHERE id > $1
ORDER BY id
LIMIT $2
`

type ListItemsParams struct {
	After int64
	First int32
}

func (q *Queries) ListItems(ctx context.Context, arg ListItemsParams) ([]Item, error) {
	rows, err := q.db.WQuery(ctx, "items.ListItems", listItems, arg.After, arg.First)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i *Item = new(Item)
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Price,
			&i.Thumbnail,
			&i.Qrcode,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, *i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}

	return items, err
}

const listSomeItems = `-- name: ListSomeItems :many
SELECT id, name, description, category, price, thumbnail, qrcode, metadata, createdat, updatedat FROM Items
WHERE id = ANY($1::bigserial[])
`

func (q *Queries) ListSomeItems(ctx context.Context, ids []int64) ([]Item, error) {
	rows, err := q.db.WQuery(ctx, "items.ListSomeItems", listSomeItems, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i *Item = new(Item)
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Price,
			&i.Thumbnail,
			&i.Qrcode,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, *i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}

	return items, err
}

const searchItems = `-- name: SearchItems :many
SELECT id, name, description, category, price, thumbnail, qrcode, metadata, createdat, updatedat FROM Items
WHERE Name LIKE $1
`

// -- cache : 100ms
func (q *Queries) SearchItems(ctx context.Context, name string) ([]Item, error) {
	dbRead := func() (any, time.Duration, error) {
		cacheDuration := time.Duration(time.Millisecond * 100)
		rows, err := q.db.WQuery(ctx, "items.SearchItems", searchItems, name)
		if err != nil {
			return nil, 0, err
		}
		defer rows.Close()
		var items []Item
		for rows.Next() {
			var i *Item = new(Item)
			if err := rows.Scan(
				&i.ID,
				&i.Name,
				&i.Description,
				&i.Category,
				&i.Price,
				&i.Thumbnail,
				&i.Qrcode,
				&i.Metadata,
				&i.CreatedAt,
				&i.UpdatedAt,
			); err != nil {
				return nil, 0, err
			}
			items = append(items, *i)
		}
		if err := rows.Err(); err != nil {
			return nil, 0, err
		}
		return items, cacheDuration, nil
	}
	if q.cache == nil {
		items, _, err := dbRead()
		return items.([]Item), err
	}
	var items []Item
	err := q.cache.GetWithTtl(ctx, "items:SearchItems:"+hashIfLong(fmt.Sprintf("%+v", name)), &items, dbRead, false, false)
	if err != nil {
		return nil, err
	}

	return items, err
}

const updateQRCode = `-- name: UpdateQRCode :execrows
UPDATE Items
SET
  QRCode = $1
WHERE
  id = $2
`

type UpdateQRCodeParams struct {
	Qrcode *string
	ID     int64
}

// -- invalidate : [GetItemByID]
func (q *Queries) UpdateQRCode(ctx context.Context, arg UpdateQRCodeParams, getItemByID *int64) (int64, error) {
	result, err := q.db.WExec(ctx, "items.UpdateQRCode", updateQRCode, arg.Qrcode, arg.ID)
	if err != nil {
		return 0, err
	}
	// invalidate
	_ = q.db.PostExec(func() error {
		var anyErr error
		if getItemByID != nil {
			key := "items:GetItemByID:" + hashIfLong(fmt.Sprintf("%+v", *getItemByID))
			err = q.cache.Invalidate(ctx, key)
			if err != nil {
				log.Error().Err(err).Msgf(
					"Failed to invalidate: %s", key)
				anyErr = err
			}
		}
		return anyErr
	})
	return result.RowsAffected(), nil
}

//// auto generated functions

func (q *Queries) Dump(ctx context.Context, beforeDump ...BeforeDump) ([]byte, error) {
	sql := "SELECT id,name,description,category,price,thumbnail,qrcode,metadata,createdat,updatedat FROM items ORDER BY id,name,description,thumbnail,qrcode,createdat,updatedat ASC;"
	rows, err := q.db.WQuery(ctx, "items.Dump", sql)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var v Item
		if err := rows.Scan(&v.ID, &v.Name, &v.Description, &v.Category, &v.Price, &v.Thumbnail, &v.Qrcode, &v.Metadata, &v.CreatedAt, &v.UpdatedAt); err != nil {
			return nil, err
		}
		for _, applyBeforeDump := range beforeDump {
			applyBeforeDump(&v)
		}
		items = append(items, v)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	bytes, err := json.MarshalIndent(items, "", "  ")
	if err != nil {
		return nil, err
	}
	return bytes, nil
}

func (q *Queries) Load(ctx context.Context, data []byte) error {
	sql := "INSERT INTO items (id,name,description,category,price,thumbnail,qrcode,metadata,createdat,updatedat) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10);"
	rows := make([]Item, 0)
	err := json.Unmarshal(data, &rows)
	if err != nil {
		return err
	}
	for _, row := range rows {
		_, err := q.db.WExec(ctx, "items.Load", sql, row.ID, row.Name, row.Description, row.Category, row.Price, row.Thumbnail, row.Qrcode, row.Metadata, row.CreatedAt, row.UpdatedAt)
		if err != nil {
			return err
		}
	}
	return nil
}

func hashIfLong(v string) string {
	if len(v) > 64 {
		hash := sha256.Sum256([]byte(v))
		return "h(" + hex.EncodeToString(hash[:]) + ")"
	}
	return v
}

// eliminate unused error
var _ = log.Logger
var _ = fmt.Sprintf("")
var _ = time.Now()
var _ = json.RawMessage{}
var _ = sha256.Sum256(nil)
var _ = hex.EncodeToString(nil)
